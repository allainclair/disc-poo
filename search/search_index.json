{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Programa\u00e7\u00e3o Orientada a Objetos Professor Site da disciplina: http://allainclair.github.io/disc-poo Reposit\u00f3rio da disciplina: https://github.com/allainclair/disc-poo Nome: Allan (Allainclair Flausino dos Santos) Email: afsantos2@uem.br Gradua\u00e7\u00e3o: Mestre em Ci\u00eancia da computa\u00e7\u00e3o Informa\u00e7\u00f5es : LinkeIn - https://www.linkedin.com/in/allainclair/ Objetivos Introduzir conceitos e desenvolver habilidades de programa\u00e7\u00e3o orientada a objetos. Conduzir a implementa\u00e7\u00e3o de aplica\u00e7\u00f5es empregando os conceitos de orienta\u00e7\u00e3o a objetos em uma linguagem de programa\u00e7\u00e3o orientada a objetos, visando \u00e0 integra\u00e7\u00e3o das diferentes camadas de software, desde a interface at\u00e9 a persist\u00eancia de dados. Conte\u00fado Program\u00e1tico Conceitos de programa\u00e7\u00e3o orientada a objetos Abstra\u00e7\u00e3o (Classes e Objetos) Encapsulamento Heran\u00e7a Polimorfismo Tecnologias orientadas a objetos Hist\u00f3rico e vers\u00f5es Compila\u00e7\u00e3o e execu\u00e7\u00e3o de programas Ambientes integrados de desenvolvimento (IDEs) Programa\u00e7\u00e3o orientada a objetos Declara\u00e7\u00e3o e inicializa\u00e7\u00e3o de vari\u00e1veis Tipos primitivos, tipos de refer\u00eancia, tipos enumerados Estruturas condicionais e de repeti\u00e7\u00e3o Classes e objetos Encapsulamento e modificadores de acesso Heran\u00e7a Polimorfismo Sobrecarga (overload) e sobrescrita (override) Classes abstratas e Interfaces Arranjos, matrizes e cole\u00e7\u00f5es (listas, mapas, conjuntos, etc) Tratamento de exce\u00e7\u00f5es Algumas classes (Wrappers, String, etc) Cria\u00e7\u00e3o de interface gr\u00e1fica Padr\u00e3o de arquitetura Modelo-Vis\u00e3o-Controlador (MVC) Componentes de interfaces gr\u00e1ficas: janelas, di\u00e1logos, bot\u00f5es, campos e \u00e1reas de texto, caixas de sele\u00e7\u00e3o, barra de rolagem, listas, tabelas, \u00e1rvores, menus, barra de ferramentas, \u00edcones, imagens, canvas, etc. Layouts e gerenciadores de layout Tratamento de eventos Persist\u00eancia de objetos Acesso a banco de dados Mapeamento objeto-relacional Classes POJO (Plain Old Java Object) Relacionamentos um para um, uma para muitos, muitos para um e muitos para muitos Data Access Object (DAO) Crit\u00e9rio 2 avalia\u00e7\u00f5es de mesmo peso; Prova 30% Trabalho 70%; Trabalho 1 e 2 comp\u00f5e um \u00fanico trabalho ao longo do semestre.","title":"Introdu\u00e7\u00e3o"},{"location":"#programacao-orientada-a-objetos","text":"","title":"Programa\u00e7\u00e3o Orientada a Objetos"},{"location":"#professor","text":"Site da disciplina: http://allainclair.github.io/disc-poo Reposit\u00f3rio da disciplina: https://github.com/allainclair/disc-poo Nome: Allan (Allainclair Flausino dos Santos) Email: afsantos2@uem.br Gradua\u00e7\u00e3o: Mestre em Ci\u00eancia da computa\u00e7\u00e3o Informa\u00e7\u00f5es : LinkeIn - https://www.linkedin.com/in/allainclair/","title":"Professor"},{"location":"#objetivos","text":"Introduzir conceitos e desenvolver habilidades de programa\u00e7\u00e3o orientada a objetos. Conduzir a implementa\u00e7\u00e3o de aplica\u00e7\u00f5es empregando os conceitos de orienta\u00e7\u00e3o a objetos em uma linguagem de programa\u00e7\u00e3o orientada a objetos, visando \u00e0 integra\u00e7\u00e3o das diferentes camadas de software, desde a interface at\u00e9 a persist\u00eancia de dados.","title":"Objetivos"},{"location":"#conteudo-programatico","text":"Conceitos de programa\u00e7\u00e3o orientada a objetos Abstra\u00e7\u00e3o (Classes e Objetos) Encapsulamento Heran\u00e7a Polimorfismo Tecnologias orientadas a objetos Hist\u00f3rico e vers\u00f5es Compila\u00e7\u00e3o e execu\u00e7\u00e3o de programas Ambientes integrados de desenvolvimento (IDEs) Programa\u00e7\u00e3o orientada a objetos Declara\u00e7\u00e3o e inicializa\u00e7\u00e3o de vari\u00e1veis Tipos primitivos, tipos de refer\u00eancia, tipos enumerados Estruturas condicionais e de repeti\u00e7\u00e3o Classes e objetos Encapsulamento e modificadores de acesso Heran\u00e7a Polimorfismo Sobrecarga (overload) e sobrescrita (override) Classes abstratas e Interfaces Arranjos, matrizes e cole\u00e7\u00f5es (listas, mapas, conjuntos, etc) Tratamento de exce\u00e7\u00f5es Algumas classes (Wrappers, String, etc) Cria\u00e7\u00e3o de interface gr\u00e1fica Padr\u00e3o de arquitetura Modelo-Vis\u00e3o-Controlador (MVC) Componentes de interfaces gr\u00e1ficas: janelas, di\u00e1logos, bot\u00f5es, campos e \u00e1reas de texto, caixas de sele\u00e7\u00e3o, barra de rolagem, listas, tabelas, \u00e1rvores, menus, barra de ferramentas, \u00edcones, imagens, canvas, etc. Layouts e gerenciadores de layout Tratamento de eventos Persist\u00eancia de objetos Acesso a banco de dados Mapeamento objeto-relacional Classes POJO (Plain Old Java Object) Relacionamentos um para um, uma para muitos, muitos para um e muitos para muitos Data Access Object (DAO)","title":"Conte\u00fado Program\u00e1tico"},{"location":"#criterio","text":"2 avalia\u00e7\u00f5es de mesmo peso; Prova 30% Trabalho 70%; Trabalho 1 e 2 comp\u00f5e um \u00fanico trabalho ao longo do semestre.","title":"Crit\u00e9rio"},{"location":"aula1/","text":"POO Baseado no coneceito de objetos o qual contem dados em forma de campos geralmente chamado de propriedades ou atributos ; e tamb\u00e9m c\u00f3digo em forma de opera\u00e7\u00f5es (procedimentos) geralmente chamados de m\u00e9todos. Uma caracter\u00edstica do objeto \u00e9 que ele pode acessar e modificar os dados dados que eles s\u00e3o associados, ou seja, suas propriedades ou atributos . Geralmente usa-se a nota\u00e7\u00e3o \"this\" ou \"self\" para isso dentro da defini\u00e7\u00e3o de sua classe. Logo \u00e9 necess\u00e1rio definir uma classe antes de cria-se um objeto (ou instanciar-se) pois objetos s\u00e3o oriundos dessa classe, que \u00e9 uma esp\u00e9cie de modelo para o objeto. Uma classe \u00e9 an\u00e1loga a uma estrutura ( struct ) em C , por\u00e9m com maior poder de expressividade pois podemos definir m\u00e9todos dentro dela. M\u00e9todos s\u00e3o an\u00e1logos a fun\u00e7\u00f5es em C . \u00c9 como se estruturas tivem dentro delas j\u00e1 suas fun\u00e7\u00f5es associadas (m\u00e9todos), e s\u00f3 objetos dessa classe podem utilizar essas fun\u00e7\u00f5es de maneira direta, na maioria dos casos. O objeto \u00e9 an\u00e1logo a uma variv\u00e1vel, por\u00e9m ele tem opera\u00e7\u00f5es (m\u00e9todos) associados. C // array.c typedef struct Array { int values [ 100 ]; int length ; } Array ; Array array ; array_append ( array , 1 ); array_append ( array , 2 ); array_append ( array , 3 ); // array = {1, 2, 3} Java //Array.java public class Array { int values [ 100 ]; int length ; public void append ( value ) { this . values [ this . length ] = value ; this . length ++; } public static void main ( String [] args ) { Array array = new Array (); array . append ( 1 ); array . append ( 2 ); array . append ( 3 ); } } Abstra\u00e7\u00e3o: \u00e9 um TAD (Tipo Abstrato de Dado); Encapsulamento. Posteriormente Heran\u00e7a e Polimorfismo.","title":"Aula 1"},{"location":"aula1/#poo","text":"Baseado no coneceito de objetos o qual contem dados em forma de campos geralmente chamado de propriedades ou atributos ; e tamb\u00e9m c\u00f3digo em forma de opera\u00e7\u00f5es (procedimentos) geralmente chamados de m\u00e9todos. Uma caracter\u00edstica do objeto \u00e9 que ele pode acessar e modificar os dados dados que eles s\u00e3o associados, ou seja, suas propriedades ou atributos . Geralmente usa-se a nota\u00e7\u00e3o \"this\" ou \"self\" para isso dentro da defini\u00e7\u00e3o de sua classe. Logo \u00e9 necess\u00e1rio definir uma classe antes de cria-se um objeto (ou instanciar-se) pois objetos s\u00e3o oriundos dessa classe, que \u00e9 uma esp\u00e9cie de modelo para o objeto. Uma classe \u00e9 an\u00e1loga a uma estrutura ( struct ) em C , por\u00e9m com maior poder de expressividade pois podemos definir m\u00e9todos dentro dela. M\u00e9todos s\u00e3o an\u00e1logos a fun\u00e7\u00f5es em C . \u00c9 como se estruturas tivem dentro delas j\u00e1 suas fun\u00e7\u00f5es associadas (m\u00e9todos), e s\u00f3 objetos dessa classe podem utilizar essas fun\u00e7\u00f5es de maneira direta, na maioria dos casos. O objeto \u00e9 an\u00e1logo a uma variv\u00e1vel, por\u00e9m ele tem opera\u00e7\u00f5es (m\u00e9todos) associados. C // array.c typedef struct Array { int values [ 100 ]; int length ; } Array ; Array array ; array_append ( array , 1 ); array_append ( array , 2 ); array_append ( array , 3 ); // array = {1, 2, 3} Java //Array.java public class Array { int values [ 100 ]; int length ; public void append ( value ) { this . values [ this . length ] = value ; this . length ++; } public static void main ( String [] args ) { Array array = new Array (); array . append ( 1 ); array . append ( 2 ); array . append ( 3 ); } } Abstra\u00e7\u00e3o: \u00e9 um TAD (Tipo Abstrato de Dado); Encapsulamento. Posteriormente Heran\u00e7a e Polimorfismo.","title":"POO"},{"location":"aula2/","text":"POO An\u00e1logias C \u2192 Java (Procedural \u2192 OO): typedef struct \u2192 Classe ; vari\u00e1vel \u2192 objeto ; fun\u00e7\u00e3o \u2192 m\u00e9todo (ou opera\u00e7\u00e3o) : que \u00e9 definido dentro de uma classe e usado pelo objeto instanciado. O objeto \u00e9 an\u00e1logo a uma variv\u00e1vel, por\u00e9m ele tem opera\u00e7\u00f5es (m\u00e9todos) associados. C // array.c typedef struct Array { int values [ 100 ]; int length ; } Array ; Array array ; array_append ( array , 1 ); array_append ( array , 2 ); array_append ( array , 3 ); // array = {1, 2, 3} Java //Array.java public class Array { int values [ 100 ]; int length ; public void append ( value ) { this . values [ this . length ] = value ; this . length ++; } public static void main ( String [] args ) { Array array = new Array (); array . append ( 1 ); array . append ( 2 ); array . append ( 3 ); } } Exerc\u00edcios Criar duas classes chamada Triangulo e Retangulo (dois arquivos .java); Atributos privados * Tri\u00e2ngulo : base , altura ; * Ret\u00e2ngulo : lado1 , lado2 ; M\u00e9todos Construtor Tri\u00e2ngulo: base, altura; Construtor Ret\u00e2ngulo: lado1, lado2; Perimetro; \u00c1rea.","title":"Aula 2"},{"location":"aula2/#poo","text":"","title":"POO"},{"location":"aula2/#analogias-c-java-procedural-oo","text":"typedef struct \u2192 Classe ; vari\u00e1vel \u2192 objeto ; fun\u00e7\u00e3o \u2192 m\u00e9todo (ou opera\u00e7\u00e3o) : que \u00e9 definido dentro de uma classe e usado pelo objeto instanciado. O objeto \u00e9 an\u00e1logo a uma variv\u00e1vel, por\u00e9m ele tem opera\u00e7\u00f5es (m\u00e9todos) associados. C // array.c typedef struct Array { int values [ 100 ]; int length ; } Array ; Array array ; array_append ( array , 1 ); array_append ( array , 2 ); array_append ( array , 3 ); // array = {1, 2, 3} Java //Array.java public class Array { int values [ 100 ]; int length ; public void append ( value ) { this . values [ this . length ] = value ; this . length ++; } public static void main ( String [] args ) { Array array = new Array (); array . append ( 1 ); array . append ( 2 ); array . append ( 3 ); } }","title":"An\u00e1logias C \u2192 Java (Procedural \u2192 OO):"},{"location":"aula2/#exercicios","text":"","title":"Exerc\u00edcios"},{"location":"aula2/#criar-duas-classes-chamada-triangulo-e-retangulo-dois-arquivos-java","text":"","title":"Criar duas classes chamada Triangulo e Retangulo (dois arquivos .java);"},{"location":"aula2/#atributos-privados","text":"* Tri\u00e2ngulo : base , altura ; * Ret\u00e2ngulo : lado1 , lado2 ;","title":"Atributos privados"},{"location":"aula2/#metodos","text":"Construtor Tri\u00e2ngulo: base, altura; Construtor Ret\u00e2ngulo: lado1, lado2; Perimetro; \u00c1rea.","title":"M\u00e9todos"},{"location":"aula3/","text":"ArrayList Array din\u00e2mico. import java.util.ArrayList ; ArrayList < String > names = new ArrayList < String >(); ... values . add ( \"Joao\" ); values . add ( \"Maria\" ); values . add ( \"Jose\" ); values . get ( 1 ); // Get \"Maria\". values . set ( 0 , \"Jonas\" ); // Change \"Joao\" to \"Jonas\". values . remove ( 0 ); // Remove \"Jonas\". values . size (); Exerc\u00edcios Ver exemplo \"Name\" e estender para \"People\" Criar alguns atributos; Criar alguns m\u00e9todos; Testar em um arquivo de exemplo; Se eu quiser colocar um atributo Smartphone? Com Codigo pa\u00eds, \u00e1rea e n\u00famero? Criar duas classes chamada Triangulo e Retangulo (dois arquivos .java); Atributos privados * Tri\u00e2ngulo : base , altura ; * Ret\u00e2ngulo : lado1 , lado2 ; M\u00e9todos Construtor Tri\u00e2ngulo: base, altura; Construtor Ret\u00e2ngulo: lado1, lado2; Perimetro; \u00c1rea.","title":"Aula 3"},{"location":"aula3/#arraylist","text":"Array din\u00e2mico. import java.util.ArrayList ; ArrayList < String > names = new ArrayList < String >(); ... values . add ( \"Joao\" ); values . add ( \"Maria\" ); values . add ( \"Jose\" ); values . get ( 1 ); // Get \"Maria\". values . set ( 0 , \"Jonas\" ); // Change \"Joao\" to \"Jonas\". values . remove ( 0 ); // Remove \"Jonas\". values . size ();","title":"ArrayList"},{"location":"aula3/#exercicios","text":"","title":"Exerc\u00edcios"},{"location":"aula3/#ver-exemplo-name-e-estender-para-people","text":"Criar alguns atributos; Criar alguns m\u00e9todos; Testar em um arquivo de exemplo; Se eu quiser colocar um atributo Smartphone? Com Codigo pa\u00eds, \u00e1rea e n\u00famero?","title":"Ver exemplo \"Name\" e estender para \"People\""},{"location":"aula3/#criar-duas-classes-chamada-triangulo-e-retangulo-dois-arquivos-java","text":"","title":"Criar duas classes chamada Triangulo e Retangulo (dois arquivos .java);"},{"location":"aula3/#atributos-privados","text":"* Tri\u00e2ngulo : base , altura ; * Ret\u00e2ngulo : lado1 , lado2 ;","title":"Atributos privados"},{"location":"aula3/#metodos","text":"Construtor Tri\u00e2ngulo: base, altura; Construtor Ret\u00e2ngulo: lado1, lado2; Perimetro; \u00c1rea.","title":"M\u00e9todos"}]}